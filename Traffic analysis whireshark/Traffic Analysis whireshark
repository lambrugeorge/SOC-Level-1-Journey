# Wireshark: Traffic Analysis  
**Premium Room**  

Learn the basics of traffic analysis with Wireshark and how to find anomalies on your network!  

---

## Task 2: Nmap Scans  

Nmap is an industry-standard tool for mapping networks, identifying live hosts, and discovering services. As one of the most used network scanner tools, a security analyst should identify the network patterns created with it.  

This section covered the most common **Nmap scan types**:  

### 🔹 TCP Flags in a Nutshell
- **SYN flag:** `tcp.flags == 2` or `tcp.flags.syn == 1`  
- **ACK flag:** `tcp.flags == 16` or `tcp.flags.ack == 1`  
- **SYN+ACK:** `tcp.flags == 18`  
- **RST flag:** `tcp.flags == 4` or `tcp.flags.reset == 1`  
- **RST+ACK:** `tcp.flags == 20`  
- **FIN flag:** `tcp.flags == 1`  

---

### 🔹 TCP Connect Scans
- Relies on the **three-way handshake** (handshake completed).  
- Command: `nmap -sT`  
- Used by **non-root users**.  
- Typically have **window size > 1024**.  
- **Filter:**  

tcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size > 1024


---

### 🔹 SYN Scans
- Does **not** complete the handshake.  
- Command: `nmap -sS`  
- Used by **privileged/root users**.  
- Typically have **window size <= 1024**.  
- **Filter:**  
tcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size <= 1024


---

### 🔹 UDP Scans
- No handshake required.  
- Open ports → no response.  
- Closed ports → ICMP error (Type 3, Code 3).  
- Command: `nmap -sU`  
- **Filter:**  

icmp.type==3 and icmp.code==3


---

## 📝 Answer the Questions  

**Q1: What is the total number of the "TCP Connect" scans?**  
✅ **Answer:** 1000  
![image](1.png)


**Q2: Which scan type is used to scan the TCP port 80?**  
✅ **Answer:** TCP Connect  
![image](2.png)


**Q3: How many "UDP close port" messages are there?**  
✅ **Answer:** 1083  
![image](2.png)



**Q4: Which UDP port in the 55-70 port range is open?**  
✅ **Answer:** 68
![image](4.png)


----------------------------------------------------------------------------------------

## 🎯 Task 3 Summary: ARP Poisoning & MITM Detection

### 🔍 What You've Mastered:

**🛡️ ARP Protocol Fundamentals:**
- ✅ Understanding Address Resolution Protocol (ARP) basics
- ✅ Learning how devices identify themselves on networks  
- ✅ Recognizing ARP's security vulnerabilities (no authentication!)

**🚨 Attack Detection Skills:**
- ✅ Identifying ARP spoofing attempts through MAC address conflicts
- ✅ Detecting ARP flooding patterns and malicious requests
- ✅ Spotting Man-in-the-Middle attacks in HTTP traffic
- ✅ Using Wireshark filters to hunt for ARP anomalies

**🔧 Practical Analysis Techniques:**
- ✅ Using `arp` filters to find low-hanging fruits
- ✅ Detecting duplicate ARP responses (expert info warnings)
- ✅ Correlating MAC addresses with IP addresses
- ✅ Identifying attacker, victim, and gateway roles

### 📊 Exercise Results & Analysis:

**Q1: Number of ARP requests crafted by the attacker?**
- **Answer:** 284 requests
- **Analysis:** ![image](5.png) - Shows the massive volume of ARP requests generated by the attacker, indicating a systematic ARP flooding attack

**Q2: Number of HTTP packets received by the attacker?**
- **Answer:** 90 packets
- **Analysis:** ![image](6.png) - Demonstrates successful traffic interception, proving the MITM attack was effective

**Q3: Number of sniffed username & password entries?**
- **Answer:** 6 entries
- **Analysis:** ![image](7.png) - Shows the real impact of the attack - multiple compromised credentials

**Q4: Password of "Client986"?**
- **Answer:** clientnothere!
- **Analysis:** Successfully extracted sensitive authentication data

**Q5: Comment provided by "Client354"?**
- **Answer:** Nice work!
- **Analysis:** ![image](9.png) - Shows additional data theft beyond credentials

----------------------------------------------------------------------------------------

## 🎯 Task 4: Identifying Hosts

### 🔍 What You'll Master:

**🖥️ Host Identification Fundamentals:**
- ✅ Understanding how to identify hosts beyond IP-to-MAC mapping
- ✅ Learning enterprise network naming patterns and their security implications
- ✅ Mastering multiple protocols for host and user identification

**🔧 Protocol Analysis Skills:**
- ✅ **DHCP Analysis** - Dynamic Host Configuration Protocol investigation
- ✅ **NetBIOS (NBNS) Analysis** - Network Basic Input/Output System traffic
- ✅ **Kerberos Analysis** - Windows domain authentication service

### 📊 DHCP Analysis

**DHCP Protocol Overview:**
DHCP (Dynamic Host Configuration Protocol) manages automatic IP address assignment and communication parameters.

**🔍 DHCP Investigation Techniques:**

| Notes | Wireshark Filter |
|-------|------------------|
| Global search | `dhcp or bootp` |
| Request packets | `dhcp.option.dhcp == 3` |
| ACK packets | `dhcp.option.dhcp == 5` |
| NAK packets | `dhcp.option.dhcp == 6` |

**📋 Key DHCP Options:**
- **Option 12:** Hostname
- **Option 50:** Requested IP address  
- **Option 51:** Requested IP lease time
- **Option 61:** Client's MAC address
- **Option 15:** Domain name (ACK packets)
- **Option 56:** Rejection message (NAK packets)

**🔧 Advanced Filters:**
```
dhcp.option.hostname contains "keyword"
dhcp.option.domain_name contains "keyword"
```

### 📊 NetBIOS (NBNS) Analysis

**NetBIOS Overview:**
Network Basic Input/Output System enables communication between applications on different hosts.

**🔍 NBNS Investigation:**

| Notes | Wireshark Filter |
|-------|------------------|
| Global search | `nbns` |
| Name queries | `nbns.name contains "keyword"` |

**📋 Key Information:**
- Query details contain name, TTL, and IP address information
- Registration requests show host activity patterns

### 📊 Kerberos Analysis

**Kerberos Overview:**
Default authentication service for Microsoft Windows domains, responsible for secure identity verification.

**🔍 Kerberos Investigation:**

| Notes | Wireshark Filter |
|-------|------------------|
| Global search | `kerberos` |
| User accounts | `kerberos.CNameString contains "keyword"` |
| Exclude hostnames | `kerberos.CNameString and !(kerberos.CNameString contains "$")` |

**📋 Key Kerberos Fields:**
- **CNameString:** Username (values ending with "$" are hostnames)
- **pvno:** Protocol version
- **realm:** Domain name for generated ticket
- **sname:** Service and domain name
- **addresses:** Client IP and NetBIOS name (request packets only)

**🔧 Advanced Filters:**
```
kerberos.pvno == 5
kerberos.realm contains ".org"
kerberos.SNameString == "krbtg"
```

---

## 📝 Answer the Questions

### 🔹 DHCP & NetBIOS Analysis
*Use the "Desktop/exercise-pcaps/dhcp-netbios-kerberos/dhcp-netbios.pcap" file.*

**Q1: What is the MAC address of the host "Galaxy A30"?**
✅ **Answer:** `9a:81:41:cb:96:6c`
![image](10.png)

**Q2: How many NetBIOS registration requests does the "LIVALJM" workstation have?**
✅ **Answer:** `16`
![image](11.png)

**Q3: Which host requested the IP address "172.16.13.85"?**
✅ **Answer:** `Galaxy-A12`
![image](12.png)

### 🔹 Kerberos Analysis
*Use the "Desktop/exercise-pcaps/dhcp-netbios-kerberos/kerberos.pcap" file.*

**Q4: What is the IP address of the user "u5"? (Enter the address in defanged format.)**
✅ **Answer:** `10[.]1[.]12[.]2`
![image](13.png)

**Q5: What is the hostname of the available host in the Kerberos packets?**
✅ **Answer:** `xp1$`
![image](14.png)


---------------------------------------------------------------------------------------

# 🎯 Task 5: Tunneling Traffic — ICMP and DNS

## 🔍 What you will master:

### 🔒 Tunneling basics:
- ✅ What tunneling is and how it hides data through encapsulation
- ✅ Why ICMP and DNS are used both legitimately and abused by attackers

### 🚨 Detection skills:
- ✅ Identifying anomalies in ICMP (unusual sizes/patterns)
- ✅ Identifying anomalies in DNS (long queries, encoded subdomains)

---

## 📊 ICMP Analysis

ICMP is used for diagnostics and reporting network issues, but it can also carry payloads and be abused for data exfiltration or C2.

### 🔍 Key ideas for investigation:
- Unusual ICMP traffic in terms of volume or packet sizes
- Unusual ICMP destinations
- Indicators of encapsulated protocols in the payload (e.g., SSH signatures)

### 🧰 Useful filters (Wireshark):

| Notes          | Wireshark Filter           |
|----------------|---------------------------|
| Global search  | `icmp`                    |
| Large payload  | `data.len > 64 and icmp`  |
| Inspect payload| Follow → “Show data as Text/Hex” |

---

## 📊 DNS Analysis

DNS maps names to IP addresses, is ubiquitous and trusted — which is why it is attractive for tunneling and C2 through long and encoded subdomains.

### 🔍 Key ideas for investigation:
- Abnormally long queries (encoded subdomains)
- Unusual/unreadable names; abnormal volumes to the same destination
- Known patterns (dnscat, dns2tcp)

### 🧰 Useful filters (Wireshark):

| Notes         | Wireshark Filter                |
|---------------|--------------------------------|
| Global search | `dns`                           |
| Exclude mDNS  | `!mdns`                         |
| Search for dnscat | `dns contains "dnscat"`     |
| Long names    | `dns.qry.name.len > 15 and !mdns` |

---

## 📝 Answer the Questions

### 🔹 ICMP Tunneling
Use the "Desktop/exercise-pcaps/dns-icmp/icmp-tunnel.pcap" file.

**Q1: Investigate the anomalous packets. Which protocol is used in ICMP tunnelling?**  
✅ **Answer:** SSH  
![image](15.png)

### 🔹 DNS Anomalies
Use the "Desktop/exercise-pcaps/dns-icmp/dns.pcap" file.

**Q2: What is the suspicious main domain address that receives anomalous DNS queries? (Enter the address in defanged format.)**  
✅ **Answer:** `dataexfil[.]com`  
![image](16.png)



-------------------------------------------------------------------------------------


## 🎯 Task 6: Cleartext Protocol Analysis — FTP

### 🔍 What you'll master:

- **Why FTP is risky**: cleartext credentials and commands → easy to intercept 🕵️‍♂️
- **How to triage fast**: use response codes and commands to find the signal ⚡
- **How to detect abuse**: brute force, password spraying, suspicious uploads/executions 🚩

### 🧰 Useful Wireshark filters

| **Notes** | **Wireshark Filter** |
|-----------|----------------------|
| Global search | `ftp` |
| Auth success | `ftp.response.code == 230` |
| Auth failures | `ftp.response.code == 530` |
| Passive mode | `ftp.response.code == 227` |
| Username attempts | `ftp.request.command == "USER"` |
| Password attempts | `ftp.request.command == "PASS"` |
| Password spray (static pass) | `(ftp.request.command == "PASS") and (ftp.request.arg == "password")` |

### 🍒 Low-hanging fruits (FTP codes)

- **x1x Information**: `211` (system), `212` (dir), `213` (file) → `ftp.response.code == 211`
- **x2x Connection**: `220` (service ready), `227/228/229` (passive modes) → `ftp.response.code == 227`
- **x3x Authentication**: `230` (login), `231` (logout), `331` (valid username), `430/530` (invalid/no login)

### 🧪 Investigation tips

- Count failures to detect brute force: `ftp.response.code == 530`
- Find target username in failures: `(ftp.response.code == 530) and (ftp.response.arg contains "username")`
- Track suspicious post-auth activity: `STOR`, `APPE`, `SITE`, `CHMOD`, directory changes `CWD`

---

## 📝 Answer the Questions
Use the "Desktop/exercise-pcaps/ftp/ftp.pcap" file.

**Q1: How many incorrect login attempts are there?**  
✅ **Answer:** 737  
![image](17.png)

**Q2: What is the size of the file accessed by the "ftp" account?**  
✅ **Answer:** 39424  
![image](18.png)

**Q3: The adversary uploaded a document to the FTP server. What is the filename?**  
✅ **Answer:** resume.doc  
![image](19.png)

**Q4: The adversary tried to assign special flags to change executing permissions. What command was used?**  
✅ **Answer:** CHMOD 777  
![image](20.png)

--------------------------------------------------------------------------------------



## 🎯 Task 7: Cleartext Protocol Analysis — HTTP

### 🔍 What you'll master:

- **Why HTTP is critical**: backbone of web traffic, unencrypted by default 🌐
- **How to detect attacks**: phishing, web attacks, data exfiltration, C2 traffic 🚨
- **How to analyze fast**: status codes, methods, headers, and parameters ⚡

### 🧰 Useful Wireshark filters

| **Notes** | **Wireshark Filter** |
|-----------|----------------------|
| Global search | `http` or `http2` |
| GET requests | `http.request.method == "GET"` |
| POST requests | `http.request.method == "POST"` |
| All requests | `http.request` |
| Success (200) | `http.response.code == 200` |
| Auth required (401) | `http.response.code == 401` |
| Forbidden (403) | `http.response.code == 403` |
| Not found (404) | `http.response.code == 404` |
| Server error (500) | `http.response.code == 500` |

### 🍒 HTTP Status Codes (Low-hanging fruits)

- **2xx Success**: `200` (OK), `301/302` (redirects)
- **4xx Client errors**: `400` (bad request), `401` (unauthorized), `403` (forbidden), `404` (not found), `405` (method not allowed)
- **5xx Server errors**: `500` (internal error), `503` (service unavailable)

### 🔧 HTTP Parameters & Headers

| **Field** | **Filter** | **Purpose** |
|-----------|------------|-------------|
| User-Agent | `http.user_agent contains "nmap"` | Tool identification |
| Request URI | `http.request.uri contains "admin"` | Resource path |
| Full URI | `http.request.full_uri contains "admin"` | Complete URL |
| Server | `http.server contains "apache"` | Server identification |
| Host | `http.host contains "keyword"` | Target hostname |
| Connection | `http.connection == "Keep-Alive"` | Connection type |
| Form data | `data-text-lines contains "keyword"` | Cleartext form data |

###🧪 Investigation tips

- **Phishing detection**: Look for suspicious domains, fake login pages
- **Web attacks**: Monitor for SQL injection patterns, XSS attempts
- **C2 traffic**: Unusual user agents, encoded data in requests
- **Data exfiltration**: Large POST requests, unusual file uploads


## 🎯 User Agent Analysis 🕵️‍♂️

As the adversaries use sophisticated technics to accomplish attacks, they try to leave traces similar to natural traffic through the known and trusted protocols. For a security analyst, it is important to spot the anomaly signs on the bits and pieces of the packets. The "user-agent" field is one of the great resources for spotting anomalies in HTTP traffic. In some cases, adversaries successfully modify the user-agent data, which could look super natural. A security analyst cannot rely only on the user-agent field to spot an anomaly. Never whitelist a user agent, even if it looks natural. User agent-based anomaly/threat detection/hunting is an additional data source to check and is useful when there is an obvious anomaly. If you are unsure about a value, you can conduct a web search to validate your findings with the default and normal user-agent info (example site). 🔍

### User Agent analysis in a nutshell 💡

Notes	Wireshark Filter
Global search.	
http.user_agent

Research outcomes for grabbing the low-hanging fruits 🍒:

- Different user agent information from the same host in a short time notice ⏱️
- Non-standard and custom user agent info 🛠️
- Subtle spelling differences. ("Mozilla" is not the same as  "Mozlilla" or "Mozlila") ✏️
- Audit tools info like Nmap, Nikto, Wfuzz and sqlmap in the user agent field 🕵️
- Payload data in the user agent field 📦

`(http.user_agent contains "sqlmap") or (http.user_agent contains "Nmap") or (http.user_agent contains "Wfuzz") or (http.user_agent contains "Nikto")`  
Wireshark - http user agent analysis

## 🪓 Log4j Analysis 💥

A proper investigation starts with prior research on threats and anomalies going to be hunted. Let's review the knowns on the "Log4j" attack before launching Wireshark.

### Log4j vulnerability analysis in a nutshell 🧰

Notes	Wireshark Filters

Research outcomes for grabbing the low-hanging fruits 🍒:

- The attack starts with a "POST" request 🚨
- There are known cleartext patterns: "jndi:ldap" and "Exploit.class" ⚠️
- `http.request.method == "POST"`
- `(ip contains "jndi") or ( ip contains "Exploit")`
- `(frame contains "jndi") or ( frame contains "Exploit")`
- `(http.user_agent contains "$") or (http.user_agent contains "==")`

Wireshark - http log4j analysis

Detecting suspicious activities in chunked files is easy and a great way to learn how to focus on the details. Now use the exercise files to put your skills into practice against a single capture file and answer the questions below! 📝

# 📝 Answer the Questions

### 🔹 User Agent Analysis
Use the "Desktop/exercise-pcaps/http/user-agent.cap" file.

**Q1: Investigate the user agents. What is the number of anomalous \"user-agent\" types?**  
✅ **Answer:** ______  
![image](20.png)

**Q2: What is the packet number with a subtle spelling difference in the user agent field?**  
✅ **Answer:** ______  
![image](21.png)

### 🔹 Log4j Analysis
Use the "Desktop/exercise-pcaps/http/http.pcapng" file.

**Q3: Locate the \"Log4j\" attack starting phase. What is the packet number?**  
✅ **Answer:** ______  
![image](22.png)

**Q4: Locate the \"Log4j\" attack starting phase and decode the base64 command. What is the IP address contacted by the adversary? (Enter the address in defanged format and exclude \"{}\").**  
✅ **Answer:** ______  
![image](22.png)
![image](23.png)
![image](24.png)
![image](25.png)



-------------------------------------------------------------------------------
## Task 8 🔐 Encrypted Protocol Analysis: Decrypting HTTPS

### Decrypting HTTPS Traffic

When investigating web traffic, analysts often run across encrypted traffic. This is caused by using the Hypertext Transfer Protocol Secure (HTTPS) protocol for enhanced security against spoofing, sniffing and intercepting attacks. HTTPS uses TLS protocol to encrypt communications, so it is impossible to decrypt the traffic and view the transferred data without having the encryption/decryption key pairs. As this protocol provides a good level of security for transmitting sensitive data, attackers and malicious websites also use HTTPS. Therefore, a security analyst should know how to use key files to decrypt encrypted traffic and investigate the traffic activity. 🛡️

The packets will appear in different colours as the HTTP traffic is encrypted. Also, protocol and info details (actual URL address and data returned from the server) will not be fully visible. The first image below shows the HTTP packets encrypted with the TLS protocol. The second and third images demonstrate filtering HTTP packets without using a key log file.

### Additional information for HTTPS

| Notes | Wireshark Filter |
|-------|-----------------|
| "HTTPS Parameters" for grabbing the low-hanging fruits 🍒 | |
| Request: Listing all requests | |
| TLS: Global TLS search | |
| TLS Client Request | |
| TLS Server response | |
| Local Simple Service Discovery Protocol (SSDP) | |

http.request
tls
tls.handshake.type == 1
tls.handshake.type == 2
ssdp

> Note: SSDP is a network protocol that provides advertisement and discovery of network services.

Wireshark - https encrypted communication

Similar to the TCP three-way handshake process, the TLS protocol has its handshake process. The first two steps contain "Client Hello" and "Server Hello" messages. The given filters show the initial hello packets in a capture file. These filters are helpful to spot which IP addresses are involved in the TLS handshake.

- **Client Hello:** `(http.request or tls.handshake.type == 1) and !(ssdp)`  
- **Server Hello:** `(http.request or tls.handshake.type == 2) and !(ssdp)`  

Wireshark - tls client and server hello messages

An encryption key log file is a text file that contains unique key pairs to decrypt the encrypted traffic session. These key pairs are automatically created per session when a connection is established with an SSL/TLS-enabled webpage. As these processes are all accomplished in the browser, you need to configure your system and use a suitable browser (Chrome and Firefox support this) to save these values as a key log file. To do this, you will need to set up an environment variable and create the SSLKEYLOGFILE, and the browser will dump the keys to this file as you browse the web. SSL/TLS key pairs are created per session at the connection time, so it is important to dump the keys during the traffic capture. Otherwise, it is not possible to create/generate a suitable key log file to decrypt captured traffic. You can use the "right-click" menu or "Edit --> Preferences --> Protocols --> TLS" menu to add/remove key log files.

### Adding key log files

- **Right-click menu:**  
Wireshark - https adding keylogfile to decrypt https traffic step-1  
![image](26.png)

- **Edit → Preferences → Protocols → TLS:**  
Wireshark - https adding keylogfile to decrypt https traffic step-2  
![image](27.png)

### Viewing traffic with/without key log files

Wireshark - viewing the traffic with and without a key log file

After using the key log file, the traffic details are visible. Packet details and bytes pane provide the data in different formats for investigation. Decompressed header info and HTTP2 packet details are available after decrypting the traffic:

- Frame  
- Decrypted TLS  
- Decompressed Header  
- Reassembled TCP  
- Reassembled SSL  

Detecting suspicious activities in chunked files is easy and a great way to learn how to focus on the details. 🔎

### Questions (Exercise: `Desktop/exercise-pcaps/https/Exercise.pcap`)

**Q1:** Frame number of the "Client Hello" message sent to `accounts.google.com`?  
✅ **Answer:** `16`  
![image](26.png)  

**Q2:** Number of HTTP2 packets?  
✅ **Answer:** `115`  
![image](27.png)  

**Q3:** Go to Frame 322. Authority header of the HTTP2 packet (defanged)?  
✅ **Answer:** `safebrowsing[.]googleapis[.]com`  
![image](28.png)  

**Q4:** Investigate decrypted packets and find the flag!  
✅ **Answer:** `FLAG{THM-PACKETMASTER}`  
![image](29.png)  

---

## Task 9 🕵️‍♂️ Bonus: Hunt Cleartext Credentials!

Up to here, we discussed how to inspect packets for anomalies. Wireshark is not an IDS, but provides expert info hints. Some anomalies replicate legitimate traffic, making detection harder. For cleartext credentials, spotting multiple username/password entries is easier when displayed as a list.

Some Wireshark dissectors (FTP, HTTP, IMAP, POP, SMTP) extract cleartext passwords from captures. Use **Tools → Credentials** (Wireshark v3.1+):

- Shows packet number, protocol, username, additional info  
- Click packet number → selects packet with password  
- Click username → selects packet with username

Wireshark - credentials  

### Questions (Exercise: `Desktop/exercise-pcaps/bonus/Bonus-exercise.pcap`)

**Q1:** Packet number of credentials using "HTTP Basic Auth"?  
✅ **Answer:** `237`  
![image](30.png)  

**Q2:** Packet number where "empty password" was submitted?  
✅ **Answer:** `170`  
![image](31.png)  

---

## Task 10 ⚙️ Bonus: Actionable Results!

After investigating traffic, detecting anomalies, and creating notes, next steps include taking action. Wireshark can create firewall rules for implementation:

- Tools → Firewall ACL Rules  
- Generate rules for: Netfilter (iptables), Cisco IOS, IP Filter, IPFirewall (ipfw), Packet Filter (pf), Windows Firewall

Wireshark - firewall acl rules  

### Questions (Exercise: `Desktop/exercise-pcaps/bonus/Bonus-exercise.pcap`)

**Q1:** Packet 99: IPFirewall (ipfw) rule for denying source IPv4?  
✅ **Answer:** `add deny ip from 10.121.70.151 to any in`  
![image](32.png)  

**Q2:** Packet 231: IPFirewall rule for allowing destination MAC address?  
✅ **Answer:** `add allow MAC 00:d0:59:aa:af:80 any in`  
![image](33.png)  
